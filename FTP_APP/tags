!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
APN	button_press.c	/^	static char *APN;$/;"	v	file:
APN	button_press_orig.c	/^	char *APN;$/;"	m	struct:apn_param	file:
APN	button_press_updated.c	/^	static char *APN;$/;"	v	file:
Access_ftp	button_press.c	/^void  Access_ftp(void)$/;"	f
Access_ftp	button_press_orig.c	/^void Access_ftp(void)$/;"	f
Access_ftp	button_press_updated.c	/^void * Access_ftp()$/;"	f
Access_ftp	cam_thread.c	/^void * Access_ftp()$/;"	f
Apn	button_press_orig.c	/^}Apn;$/;"	v	typeref:struct:apn_param
BAUDRATE	logger.c	12;"	d	file:
BIT	button_press.c	395;"	d	file:
BIT	button_press_orig.c	393;"	d	file:
BIT	button_press_updated.c	394;"	d	file:
BITS_PER_LONG	button_press.c	392;"	d	file:
BITS_PER_LONG	button_press_orig.c	390;"	d	file:
BITS_PER_LONG	button_press_updated.c	391;"	d	file:
CAMLH_DIR	Makefile	/^CAMLH_DIR = \/usr\/local\/godi\/lib\/ocaml\/std-lib\/$/;"	m
CAP_MODE	button_press.c	/^	int CAP_MODE;$/;"	v
CAP_MODE	button_press_orig.c	/^	int Fps, V_SIZE, V_IVAL,CAP_MODE;$/;"	m	struct:__anon1	file:
CAP_MODE	button_press_updated.c	/^	int CAP_MODE;$/;"	v
CC	Makefile	/^CC=arm-poky-linux-gnueabi-gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -I $(CAMLH_DIR) $(NO_CAML) -O2 -Wall$/;"	m
CLEAR	button_press.c	68;"	d	file:
CLEAR	button_press_orig.c	62;"	d	file:
CLEAR	button_press_updated.c	68;"	d	file:
CONFIG_DEBUG	logger.h	2;"	d
CONFIG_FILE	logger.c	20;"	d	file:
EV_SYN	button_press.c	71;"	d	file:
EV_SYN	button_press_orig.c	65;"	d	file:
EV_SYN	button_press_updated.c	71;"	d	file:
Extern	ftp_var.h	50;"	d
Extern	ftplib.c	66;"	d	file:
FALSE	logger.c	15;"	d	file:
FTP_LINK	button_press.c	/^	static char *FTP_LINK;$/;"	v	file:
FTP_LINK	button_press_orig.c	/^	char *FTP_LINK;$/;"	m	struct:ftp_param	file:
FTP_LINK	button_press_updated.c	/^	static char *FTP_LINK;$/;"	v	file:
FTP_PWD	button_press.c	/^	static char *FTP_PWD;$/;"	v	file:
FTP_PWD	button_press_orig.c	/^	char *FTP_PWD;$/;"	m	struct:ftp_param	file:
FTP_PWD	button_press_updated.c	/^	static char *FTP_PWD;$/;"	v	file:
FTP_UNAME	button_press.c	/^	static char *FTP_UNAME;$/;"	v	file:
FTP_UNAME	button_press_orig.c	/^	char *FTP_UNAME;$/;"	m	struct:ftp_param	file:
FTP_UNAME	button_press_updated.c	/^	static char *FTP_UNAME;$/;"	v	file:
F_name	button_press.c	/^	static char *F_name;$/;"	v	file:
F_name	button_press_orig.c	/^	char *F_name;$/;"	m	struct:__anon1	file:
F_name	button_press_updated.c	/^	static char *F_name;$/;"	v	file:
Fps	button_press.c	/^	int i, Fps;$/;"	v
Fps	button_press_orig.c	/^	int Fps, V_SIZE, V_IVAL,CAP_MODE;$/;"	m	struct:__anon1	file:
Fps	button_press_updated.c	/^	int i, Fps;$/;"	v
HEIGHT	button_press.c	/^	static int WIDTH,HEIGHT;$/;"	v	file:
HEIGHT	button_press_orig.c	/^	int WIDTH,HEIGHT;$/;"	m	struct:__anon1	file:
HEIGHT	button_press_updated.c	/^	static int WIDTH,HEIGHT;$/;"	v	file:
IP	button_press.c	/^	char *ip, *IP;$/;"	v
IP	button_press_orig.c	/^	char *ip, *IP;$/;"	m	struct:host_ip	file:
IP	button_press_updated.c	/^	char *ip, *IP;$/;"	v
I_HEIGHT	button_press.c	/^        static int I_WIDTH,I_HEIGHT;$/;"	v	file:
I_HEIGHT	button_press_orig.c	/^        int I_WIDTH,I_HEIGHT;$/;"	m	struct:image_param	file:
I_HEIGHT	button_press_updated.c	/^        static int I_WIDTH,I_HEIGHT;$/;"	v	file:
I_IVAL	button_press.c	/^	int I_IVAL;$/;"	v
I_IVAL	button_press_orig.c	/^	int I_IVAL;$/;"	m	struct:image_param	file:
I_IVAL	button_press_updated.c	/^	int I_IVAL;$/;"	v
I_VAL	char.h	/^        int I_VAL;$/;"	v
I_WIDTH	button_press.c	/^        static int I_WIDTH,I_HEIGHT;$/;"	v	file:
I_WIDTH	button_press_orig.c	/^        int I_WIDTH,I_HEIGHT;$/;"	m	struct:image_param	file:
I_WIDTH	button_press_updated.c	/^        static int I_WIDTH,I_HEIGHT;$/;"	v	file:
I_name	button_press.c	/^	char *i_name, *I_name;$/;"	v
I_name	button_press_orig.c	/^	char *i_width,*i_height,*i_intr,*i_name, *I_name;$/;"	m	struct:image_param	file:
I_name	button_press_updated.c	/^	char *i_name, *I_name;$/;"	v
LONG	button_press.c	396;"	d	file:
LONG	button_press_orig.c	394;"	d	file:
LONG	button_press_updated.c	395;"	d	file:
MALLOC_BUF	ftp.c	460;"	d	file:
MODEMDEVICE	logger.c	13;"	d	file:
NBITS	button_press.c	393;"	d	file:
NBITS	button_press_orig.c	391;"	d	file:
NBITS	button_press_updated.c	392;"	d	file:
NO_CAML	Makefile	/^NO_CAML      = -DNO_CAML$/;"	m
OFF	button_press.c	394;"	d	file:
OFF	button_press_orig.c	392;"	d	file:
OFF	button_press_updated.c	393;"	d	file:
PRINT_D	logger.h	5;"	d
PRINT_F	logger.h	11;"	d
Read	button_press.c	/^	char Read;$/;"	v
Read	button_press_orig.c	/^	char Read;$/;"	v
Read	button_press_updated.c	/^	char Read;$/;"	v
Read_config_file	button_press.c	/^void Read_config_file(void)$/;"	f
Read_config_file	button_press_orig.c	/^void Read_config_file(void)$/;"	f
Read_config_file	button_press_updated.c	/^void Read_config_file(void)$/;"	f
SESSION_TRACKER	logger.c	/^static int SESSION_TRACKER; \/\/Keeps track of session$/;"	v	file:
TICKBYTES	ftp_var.h	47;"	d
TRUE	logger.c	16;"	d	file:
UC	ftp.c	886;"	d	file:
V_IVAL	button_press.c	/^	int V_SIZE, V_IVAL;$/;"	v
V_IVAL	button_press_orig.c	/^	int Fps, V_SIZE, V_IVAL,CAP_MODE;$/;"	m	struct:__anon1	file:
V_IVAL	button_press_updated.c	/^	int V_SIZE, V_IVAL;$/;"	v
V_IVAL	char.h	/^        int V_SIZE, V_IVAL;$/;"	v
V_SIZE	button_press.c	/^	int V_SIZE, V_IVAL;$/;"	v
V_SIZE	button_press_orig.c	/^	int Fps, V_SIZE, V_IVAL,CAP_MODE;$/;"	m	struct:__anon1	file:
V_SIZE	button_press_updated.c	/^	int V_SIZE, V_IVAL;$/;"	v
V_SIZE	char.h	/^        int V_SIZE, V_IVAL;$/;"	v
WIDTH	button_press.c	/^	static int WIDTH,HEIGHT;$/;"	v	file:
WIDTH	button_press_orig.c	/^	int WIDTH,HEIGHT;$/;"	m	struct:__anon1	file:
WIDTH	button_press_updated.c	/^	static int WIDTH,HEIGHT;$/;"	v	file:
_POSIX_SOURCE	logger.c	14;"	d	file:
abort_remote	ftp.c	/^abort_remote(FILE *din)$/;"	f	file:
abortrecv	ftp.c	/^abortrecv(int ignore)$/;"	f	file:
abortsend	ftp.c	/^abortsend(int ignore)$/;"	f	file:
abrtflag	ftp.c	/^static int abrtflag = 0;$/;"	v	file:
absolutes	button_press.c	/^char *absolutes[ABS_MAX + 1] = {$/;"	v
absolutes	button_press_orig.c	/^char *absolutes[ABS_MAX + 1] = {$/;"	v
absolutes	button_press_updated.c	/^char *absolutes[ABS_MAX + 1] = {$/;"	v
absval	button_press.c	/^char *absval[5] = { "Value", "Min  ", "Max  ", "Fuzz ", "Flat " };$/;"	v
absval	button_press_orig.c	/^char *absval[5] = { "Value", "Min  ", "Max  ", "Fuzz ", "Flat " };$/;"	v
absval	button_press_updated.c	/^char *absval[5] = { "Value", "Min  ", "Max  ", "Fuzz ", "Flat " };$/;"	v
accel	video_capture.h	/^GstElement *source, *filter, *accel, *encoder, *queue, *muxer, *sink;$/;"	v
add_one_file	caml.c	/^static int add_one_file(char *file, unsigned unused)$/;"	f	file:
altarg	ftp_var.h	/^Extern char	*altarg;	\/* argv[1] with no shell-like preprocessing  *\/$/;"	v
apn	button_press.c	/^	char *apn; $/;"	v
apn	button_press_orig.c	/^	char *apn; $/;"	m	struct:apn_param	file:
apn	button_press_updated.c	/^	char *apn; $/;"	v
apn_param	button_press_orig.c	/^struct apn_param$/;"	s	file:
buf	button_press.c	/^	char **buf[20];$/;"	v
buf	button_press_orig.c	/^	char **buf[20];$/;"	v
buf	button_press_updated.c	/^	char **buf[20];$/;"	v
bus	video_capture.h	/^GstBus *bus;$/;"	v
bus_call	button_press.c	/^static gboolean bus_call	(GstBus     *bus,$/;"	f	file:
bus_call	button_press_updated.c	/^static gboolean bus_call	(GstBus     *bus,$/;"	f	file:
bus_call	cam_thread.c	/^static gboolean bus_call	(GstBus     *bus,$/;"	f	file:
bus_watch_id	video_capture.h	/^guint bus_watch_id;$/;"	v
bytename	ftp_var.h	/^Extern char	bytename[32];		\/* local byte size in ascii *\/$/;"	v
caml_ftp_cd	caml.c	/^CAMLprim value caml_ftp_cd(value directory)$/;"	f
caml_ftp_close	caml.c	/^CAMLprim value caml_ftp_close(void)$/;"	f
caml_ftp_delete	caml.c	/^CAMLprim value caml_ftp_delete(value file)$/;"	f
caml_ftp_get	caml.c	/^CAMLprim value caml_ftp_get(value rst,value remotefile, value localfile)$/;"	f
caml_ftp_ls	caml.c	/^CAMLprim value caml_ftp_ls(value long_ls, value name)$/;"	f
caml_ftp_mkdir	caml.c	/^CAMLprim value caml_ftp_mkdir(value directory)$/;"	f
caml_ftp_open	caml.c	/^CAMLprim value caml_ftp_open(value server, value login, value passwd)$/;"	f
caml_ftp_put	caml.c	/^CAMLprim value caml_ftp_put(value rst, value append,$/;"	f
caml_ftp_putunique	caml.c	/^CAMLprim value caml_ftp_putunique(value localfile, value remotefile)$/;"	f
caml_ftp_rename	caml.c	/^CAMLprim value caml_ftp_rename(value oldfile, value newfile)$/;"	f
caml_ftp_rmdir	caml.c	/^CAMLprim value caml_ftp_rmdir(value directory)$/;"	f
caml_ftp_sendcommand	caml.c	/^CAMLprim value caml_ftp_sendcommand(value command)$/;"	f
caml_setpassive	caml.c	/^CAMLprim value caml_setpassive(value passive)$/;"	f
caml_setsafeput	caml.c	/^CAMLprim value caml_setsafeput(value safeput)$/;"	f
caml_setsendport	caml.c	/^CAMLprim value caml_setsendport(value sendport)$/;"	f
caml_setverbose	caml.c	/^CAMLprim value caml_setverbose(value verbose)$/;"	f
caml_version	caml.c	/^CAMLprim value caml_version(void)$/;"	f
capture_count	button_press.c	/^static gint capture_count = 0;$/;"	v	file:
capture_count	button_press_updated.c	/^static gint capture_count = 0;$/;"	v	file:
capture_count	cam_thread.c	/^static gint capture_count = 0;$/;"	v	file:
capture_time	button_press.c	/^static gint capture_time = 10;$/;"	v	file:
capture_time	button_press_updated.c	/^static gint capture_time = 10;$/;"	v	file:
capture_time	cam_thread.c	/^static gint capture_time = 20;$/;"	v	file:
changetype	ftp.c	/^changetype(int newtype, int show)$/;"	f
cin	ftp.c	/^FILE *cin, *cout;$/;"	v
clear_memory	button_press.c	/^void clear_memory(void)$/;"	f
close_port	logger.c	/^void close_port()$/;"	f
cmdabort	ftp.c	/^cmdabort(int ignore)$/;"	f	file:
code	ftp_var.h	/^Extern int	code;		\/* return\/reply code for ftp command *\/$/;"	v
command	ftp.c	/^command(const char *fmt, ...)$/;"	f
connected	ftp_var.h	/^Extern int	connected;	\/* connected to server *\/$/;"	v
copyright	ftplib.c	/^char copyright[] =$/;"	v
cout	ftp.c	/^FILE *cin, *cout;$/;"	v
cpend	ftp_var.h	/^Extern int	cpend;		\/* flag: if != 0, then pending server reply *\/$/;"	v
crflag	ftp_var.h	/^Extern int	crflag;		\/* if 1, strip car. rets. on ascii gets *\/$/;"	v
curtype	ftp_var.h	/^Extern int	curtype;		\/* current file transfer type *\/$/;"	v
data	ftp.c	/^int data = -1;$/;"	v
data_addr	ftp.c	/^static struct sockaddr_in data_addr;$/;"	v	typeref:struct:sockaddr_in	file:
dataconn	ftp.c	/^dataconn(const char *lmode)$/;"	f	file:
do_init	ftplib.c	/^do_init(void)$/;"	f	file:
dologin	ftp.c	/^dologin(const char *luser, const char *pass)$/;"	f
empty	ftp.c	/^empty(fd_set *mask, int hifd, int sec)$/;"	f	file:
encoder	video_capture.h	/^GstElement *source, *filter, *accel, *encoder, *queue, *muxer, *sink;$/;"	v
error	example.c	/^int error(char *msg)$/;"	f
events	button_press.c	/^char *events[EV_MAX + 1] = {$/;"	v
events	button_press_orig.c	/^char *events[EV_MAX + 1] = {$/;"	v
events	button_press_updated.c	/^char *events[EV_MAX + 1] = {$/;"	v
f_cnt	button_press.c	/^static int f_cnt = 0, n_cnt=1, m_cnt=1;$/;"	v	file:
f_cnt	button_press_updated.c	/^static int f_cnt = 0;$/;"	v	file:
f_name	button_press.c	/^	char *f_name;$/;"	v
f_name	button_press_orig.c	/^	char *width, *height, *f_name,*v_sz, *v_intr;$/;"	m	struct:__anon1	file:
f_name	button_press_updated.c	/^	char *f_name;$/;"	v
factory_make	button_press.c	/^int factory_make(char* location)$/;"	f
factory_make	button_press_updated.c	/^int factory_make(char* location)$/;"	f
factory_make	cam_thread.c	/^int factory_make(char* location)$/;"	f
fd	logger.c	/^int fd=0;$/;"	v
file	button_press.c	/^	FILE *file, *fp1, *fp2;$/;"	v
file	button_press_orig.c	/^	FILE *file;$/;"	v
file	button_press_updated.c	/^	FILE *file;$/;"	v
filter	video_capture.h	/^GstElement *source, *filter, *accel, *encoder, *queue, *muxer, *sink;$/;"	v
fin	ftplib.c	/^FILE *fout, *fin;$/;"	v
folder	button_press.c	/^char folder[1024];$/;"	v
fout	ftplib.c	/^FILE *fout, *fin;$/;"	v
fp	logger.c	/^FILE *fp ;$/;"	v
fp1	button_press.c	/^	FILE *file, *fp1, *fp2;$/;"	v
fp2	button_press.c	/^	FILE *file, *fp1, *fp2;$/;"	v
fps	button_press.c	/^	unsigned char *fps;$/;"	v
fps	button_press_orig.c	/^	unsigned char *fps;$/;"	m	struct:__anon1	file:
fps	button_press_updated.c	/^	unsigned char *fps;$/;"	v
ftp	button_press_orig.c	/^}ftp;$/;"	v	typeref:struct:ftp_param
ftp_cd	ftplib.c	/^ftp_cd(char *directory)$/;"	f
ftp_close	ftplib.c	/^ftp_close(void)$/;"	f
ftp_debug	ftplib.h	/^int ftp_debug = 0;$/;"	v
ftp_delete	ftplib.c	/^ftp_delete(char *file)$/;"	f
ftp_get	ftplib.c	/^ftp_get(char *pathname, int(*fct)(char*,unsigned), unsigned bufsize, off_t rst)$/;"	f
ftp_getfile	ftplib.c	/^ftp_getfile(char *remote_file, char *local_file, off_t rst)$/;"	f
ftp_link	button_press.c	/^	char *ftp_link;$/;"	v
ftp_link	button_press_orig.c	/^	char *ftp_link;$/;"	m	struct:ftp_param	file:
ftp_link	button_press_updated.c	/^	char *ftp_link;$/;"	v
ftp_ls	ftplib.c	/^ftp_ls(int ll, char *pathname, int(*fct)(char*,unsigned))$/;"	f
ftp_mkdir	ftplib.c	/^ftp_mkdir(char *directory)$/;"	f
ftp_open	ftplib.c	/^ftp_open(char *server, char *login, char *passwd)$/;"	f
ftp_param	button_press_orig.c	/^struct ftp_param$/;"	s	file:
ftp_passive	ftplib.h	/^int ftp_passive = 1;$/;"	v
ftp_port	ftp_var.h	/^Extern int	ftp_port;	\/* htons'd port number for ftp service *\/$/;"	v
ftp_put	ftplib.c	/^ftp_put(char *pathname, int(*fct)(char*,unsigned), unsigned size, off_t rst,$/;"	f
ftp_putfile	ftplib.c	/^ftp_putfile(char *local_file, char *remote_file, off_t rst, int append)$/;"	f
ftp_putfileunique	ftplib.c	/^ftp_putfileunique(char *local_file, char *remote_file,$/;"	f
ftp_putunique	ftplib.c	/^ftp_putunique(char *pathname, char *uname, unsigned usize,$/;"	f
ftp_pwd	button_press.c	/^	char *ftp_pwd;$/;"	v
ftp_pwd	button_press_orig.c	/^	char *ftp_pwd;$/;"	m	struct:ftp_param	file:
ftp_pwd	button_press_updated.c	/^	char *ftp_pwd;$/;"	v
ftp_rcsid	ftp.c	/^char ftp_rcsid[] = $/;"	v
ftp_rename	ftplib.c	/^ftp_rename(char *oldname, char *newname)$/;"	f
ftp_rmdir	ftplib.c	/^ftp_rmdir(char *directory)$/;"	f
ftp_safeput	ftplib.h	/^int ftp_safeput = 1;  \/\/ if set, put to destfile".tmp", then rename$/;"	v
ftp_sendcommand	ftplib.c	/^ftp_sendcommand(char *cmd, char *buf, unsigned size)$/;"	f
ftp_sendport	ftplib.h	/^int ftp_sendport = 0;$/;"	v
ftp_uname	button_press.c	/^	char *ftp_uname;$/;"	v
ftp_uname	button_press_orig.c	/^	char *ftp_uname;$/;"	m	struct:ftp_param	file:
ftp_uname	button_press_updated.c	/^	char *ftp_uname;$/;"	v
ftp_verbose	ftplib.h	/^int ftp_verbose = 0;$/;"	v
getreply	ftp.c	/^getreply(int expecteof)$/;"	f
hash	ftp_var.h	/^Extern int	hash;		\/* print # for each buffer transferred *\/$/;"	v
head	caml.c	/^static value head;$/;"	v	file:
height	button_press.c	/^	char *width, *height;$/;"	v
height	button_press_orig.c	/^	char *width, *height, *f_name,*v_sz, *v_intr;$/;"	m	struct:__anon1	file:
height	button_press_updated.c	/^	char *width, *height;$/;"	v
hisctladdr	ftp.c	/^static struct sockaddr_in hisctladdr;$/;"	v	typeref:struct:sockaddr_in	file:
home	ftplib.c	/^const char *home = "\/";$/;"	v
hookup	ftp.c	/^hookup(char *host, int port)$/;"	f
host_ip	button_press_orig.c	/^struct host_ip$/;"	s	file:
hostip	button_press_orig.c	/^}hostip;$/;"	v	typeref:struct:host_ip
hostname	ftp_var.h	/^Extern char	*hostname;	\/* name of host connected to *\/$/;"	v
i	button_press.c	/^	int i, Fps;$/;"	v
i	button_press_orig.c	/^	int i;$/;"	v
i	button_press_updated.c	/^	int i, Fps;$/;"	v
i	cam_thread.c	/^static int i = 0;$/;"	v	file:
i_height	button_press.c	/^	char *i_width,*i_height;$/;"	v
i_height	button_press_orig.c	/^	char *i_width,*i_height,*i_intr,*i_name, *I_name;$/;"	m	struct:image_param	file:
i_height	button_press_updated.c	/^	char *i_width,*i_height;$/;"	v
i_intr	button_press.c	/^	char *i_intr;$/;"	v
i_intr	button_press_orig.c	/^	char *i_width,*i_height,*i_intr,*i_name, *I_name;$/;"	m	struct:image_param	file:
i_intr	button_press_updated.c	/^	char *i_intr;$/;"	v
i_intr	char.h	/^        char *i_intr;$/;"	v
i_name	button_press.c	/^	char *i_name, *I_name;$/;"	v
i_name	button_press_orig.c	/^	char *i_width,*i_height,*i_intr,*i_name, *I_name;$/;"	m	struct:image_param	file:
i_name	button_press_updated.c	/^	char *i_name, *I_name;$/;"	v
i_width	button_press.c	/^	char *i_width,*i_height;$/;"	v
i_width	button_press_orig.c	/^	char *i_width,*i_height,*i_intr,*i_name, *I_name;$/;"	m	struct:image_param	file:
i_width	button_press_updated.c	/^	char *i_width,*i_height;$/;"	v
image	button_press_orig.c	/^}image;$/;"	v	typeref:struct:image_param
image_param	button_press_orig.c	/^struct image_param$/;"	s	file:
initconn	ftp.c	/^initconn(void)$/;"	f	file:
intHandler	button_press.c	/^void intHandler(int dummy) {$/;"	f
intHandler	button_press_updated.c	/^void intHandler(int dummy) {$/;"	f
intHandler	cam_thread.c	/^void intHandler(int dummy) {$/;"	f
intr	ftplib.c	/^intr(int ignore)$/;"	f
ip	button_press.c	/^	char *ip, *IP;$/;"	v
ip	button_press_orig.c	/^	char *ip, *IP;$/;"	m	struct:host_ip	file:
ip	button_press_updated.c	/^	char *ip, *IP;$/;"	v
isDirectoryEmpty	button_press.c	/^int isDirectoryEmpty(char *dirname) {$/;"	f
k	button_press.c	/^static int k = 0;$/;"	v	file:
keys	button_press.c	/^char *keys[KEY_MAX + 1] = {$/;"	v
keys	button_press_orig.c	/^char *keys[KEY_MAX + 1] = {$/;"	v
keys	button_press_updated.c	/^char *keys[KEY_MAX + 1] = {$/;"	v
leds	button_press.c	/^char *leds[LED_MAX + 1] = {$/;"	v
leds	button_press_orig.c	/^char *leds[LED_MAX + 1] = {$/;"	v
leds	button_press_updated.c	/^char *leds[LED_MAX + 1] = {$/;"	v
len	button_press.c	/^	size_t len = 0;$/;"	v
len	button_press_orig.c	/^	size_t len = 0;$/;"	v
len	button_press_updated.c	/^	size_t len = 0;$/;"	v
len	cam_thread.c	/^sem_t len;$/;"	v
line	button_press.c	/^	char *line = NULL;$/;"	v
line	button_press_orig.c	/^	char *line = NULL;$/;"	v
line	button_press_updated.c	/^	char *line = NULL;$/;"	v
lineIndex	button_press.c	/^	int lineIndex = 0;$/;"	v
lineIndex	button_press_orig.c	/^	int lineIndex = 0; $/;"	v
lineIndex	button_press_updated.c	/^	int lineIndex = 0; $/;"	v
local	button_press.c	/^char *local;$/;"	v
lock	button_press.c	/^sem_t lock;$/;"	v
lock	button_press_updated.c	/^sem_t lock;$/;"	v
log_print	logger.c	/^void log_print(char* filename, int line, char *fmt,...)$/;"	f
log_write	logger.c	/^void log_write(void)$/;"	f
loop	video_capture.h	/^GMainLoop *loop;$/;"	v
lostpeer	ftplib.c	/^lostpeer(int ignore)$/;"	f
lreply	ftp.c	/^char lreply[BUFSIZ];$/;"	v
m_cnt	button_press.c	/^static int f_cnt = 0, n_cnt=1, m_cnt=1;$/;"	v	file:
main	Read_Config_file.c	/^int main()$/;"	f
main	button_press.c	/^int main (int argc, char **argv)$/;"	f
main	button_press_orig.c	/^int main (int argc, char **argv)$/;"	f
main	button_press_updated.c	/^int main (int argc, char **argv)$/;"	f
main	cam_thread.c	/^int main()$/;"	f
main	example.c	/^int main(int argc, char **argv)$/;"	f
main	strtok.c	/^int main()$/;"	f
main	test.c	/^int main()$/;"	f
main	testing.c	/^int main()$/;"	f
mapflag	ftp_var.h	/^Extern int	mapflag;	\/* use mapin mapout templates on file names *\/$/;"	v
mapin	ftp_var.h	/^Extern char	mapin[MAXPATHLEN];	\/* input map template *\/$/;"	v
mapout	ftp_var.h	/^Extern char	mapout[MAXPATHLEN];	\/* output map template *\/$/;"	v
mark	button_press_orig.c	/^volatile int mark = 0;$/;"	v
mflag	ftp_var.h	/^Extern int	mflag;		\/* flag: if != 0, then active multi command *\/$/;"	v
misc	button_press.c	/^char *misc[MSC_MAX + 1] = {$/;"	v
misc	button_press_orig.c	/^char *misc[MSC_MAX + 1] = {$/;"	v
misc	button_press_updated.c	/^char *misc[MSC_MAX + 1] = {$/;"	v
mode	ftp_var.h	/^Extern int	mode;			\/* file transfer mode *\/$/;"	v
muxer	video_capture.h	/^GstElement *source, *filter, *accel, *encoder, *queue, *muxer, *sink;$/;"	v
mv_files	button_press.c	/^void mv_files(char *source, char *target)$/;"	f
myctladdr	ftp.c	/^static struct sockaddr_in myctladdr;$/;"	v	typeref:struct:sockaddr_in	file:
n	button_press.c	/^char n[1024], tmpname[100];$/;"	v
n	button_press_updated.c	/^char n[1024];$/;"	v
n	cam_thread.c	/^char n[1024];$/;"	v
n_cnt	button_press.c	/^static int f_cnt = 0, n_cnt=1, m_cnt=1;$/;"	v	file:
names	button_press.c	/^char **names[EV_MAX + 1] = {$/;"	v
names	button_press_orig.c	/^char **names[EV_MAX + 1] = {$/;"	v
names	button_press_updated.c	/^char **names[EV_MAX + 1] = {$/;"	v
newtp	logger.c	/^struct termios oldtp, newtp;$/;"	v	typeref:struct:
ntflag	ftp_var.h	/^Extern int	ntflag;		\/* use ntin ntout tables for name xlation *\/$/;"	v
ntin	ftp_var.h	/^Extern char	ntin[17];	\/* input translation table *\/$/;"	v
ntout	ftp_var.h	/^Extern char	ntout[17];	\/* output translation table *\/$/;"	v
nz	ftp.c	950;"	d	file:
oldtp	logger.c	/^struct termios oldtp, newtp;$/;"	v	typeref:struct:termios
open_port	logger.c	/^void open_port(void)$/;"	f
options	ftp_var.h	/^Extern int	options;	\/* used during socket creation *\/$/;"	v
pasv	ftp_var.h	/^Extern char     pasv[64];       \/* passive port for proxy data connection *\/$/;"	v
pipeline	video_capture.h	/^GstElement *pipeline;$/;"	v
pipeline_make	button_press.c	/^int pipeline_make()$/;"	f
pipeline_make	button_press_updated.c	/^int pipeline_make()$/;"	f
pipeline_make	cam_thread.c	/^int pipeline_make()$/;"	f
print_time	logger.c	/^char* print_time()$/;"	f
process_entry	example.c	/^int process_entry(char *ent, unsigned len)$/;"	f
ptabflg	ftp.c	/^static int ptabflg = 0;$/;"	v	file:
ptransfer	ftp.c	/^ptransfer(const char *direction, long bytes, $/;"	f	file:
queue	video_capture.h	/^GstElement *source, *filter, *accel, *encoder, *queue, *muxer, *sink;$/;"	v
read_put_buf	ftplib.c	/^read_put_buf(char *buf, unsigned size)$/;"	f	file:
recvabort	ftp.c	/^static sigjmp_buf recvabort;$/;"	v	file:
recvrequest	ftp.c	/^recvrequest(const char *cmd, char *remote, int (*out_fct)(char*,unsigned),$/;"	f
relatives	button_press.c	/^char *relatives[REL_MAX + 1] = {$/;"	v
relatives	button_press_orig.c	/^char *relatives[REL_MAX + 1] = {$/;"	v
relatives	button_press_updated.c	/^char *relatives[REL_MAX + 1] = {$/;"	v
repeats	button_press.c	/^char *repeats[REP_MAX + 1] = {$/;"	v
repeats	button_press_orig.c	/^char *repeats[REP_MAX + 1] = {$/;"	v
repeats	button_press_updated.c	/^char *repeats[REP_MAX + 1] = {$/;"	v
reply_string	ftp.c	/^char reply_string[BUFSIZ];		\/* last line of previous reply *\/$/;"	v
res	button_press.c	/^char res[1024];$/;"	v
res	button_press_updated.c	/^char res[1024];$/;"	v
res	cam_thread.c	/^char res[1024];$/;"	v
reset	ftp.c	/^reset(void)$/;"	f
sendabort	ftp.c	/^static sigjmp_buf sendabort;$/;"	v	file:
sendrequest	ftp.c	/^sendrequest(const char *cmd, char *remote, int (*in_fct)(char*,unsigned),$/;"	f
sink	video_capture.h	/^GstElement *source, *filter, *accel, *encoder, *queue, *muxer, *sink;$/;"	v
sounds	button_press.c	/^char *sounds[SND_MAX + 1] = {$/;"	v
sounds	button_press_orig.c	/^char *sounds[SND_MAX + 1] = {$/;"	v
sounds	button_press_updated.c	/^char *sounds[SND_MAX + 1] = {$/;"	v
source	video_capture.h	/^GstElement *source, *filter, *accel, *encoder, *queue, *muxer, *sink;$/;"	v
start_capture	button_press.c	/^void * start_capture()$/;"	f
start_capture	button_press_updated.c	/^void * start_capture()$/;"	f
start_capture	cam_thread.c	/^void * start_capture()$/;"	f
start_process	button_press_updated.c	/^void start_process(void)$/;"	f
state_handler	button_press.c	/^int state_handler()$/;"	f
state_handler	button_press_updated.c	/^int state_handler()$/;"	f
state_handler	cam_thread.c	/^int state_handler()$/;"	f
stop_capture	button_press.c	/^stop_capture (gpointer user_data)$/;"	f	file:
stop_capture	button_press_updated.c	/^stop_capture (gpointer user_data)$/;"	f	file:
stop_capture	cam_thread.c	/^stop_capture (gpointer user_data)$/;"	f	file:
structname	ftp_var.h	/^Extern char	structname[32];		\/* name of file transfer structure *\/$/;"	v
t_arg	ftp.c	/^	const char *t_arg;$/;"	m	struct:types	file:
t_mode	ftp.c	/^	const char *t_mode;$/;"	m	struct:types	file:
t_name	ftp.c	/^	const char *t_name;$/;"	m	struct:types	file:
t_type	ftp.c	/^	int t_type;$/;"	m	struct:types	file:
test_bit	button_press.c	397;"	d	file:
test_bit	button_press_orig.c	395;"	d	file:
test_bit	button_press_updated.c	396;"	d	file:
timer	button_press.c	/^GTimer *timer = NULL;$/;"	v
timer	button_press_updated.c	/^GTimer *timer = NULL;$/;"	v
timer	cam_thread.c	/^GTimer *timer = NULL;$/;"	v
tmpname	button_press.c	/^char n[1024], tmpname[100];$/;"	v
toplevel	ftp_var.h	/^Extern sigjmp_buf toplevel;	\/* non-local goto stuff for cmd scanner *\/$/;"	v
traceflag	ftp_var.h	/^Extern int	traceflag;	\/* trace packets exchanged *\/$/;"	v
traceflag	ftplib.c	/^int traceflag = 0;$/;"	v
trigger	button_press_orig.c	/^void trigger(int sig)$/;"	f
tvsub	ftp.c	/^tvsub(struct timeval *tdiff, $/;"	f	file:
type	ftp_var.h	/^Extern int	type;			\/* requested file transfer type *\/$/;"	v
types	ftp.c	/^struct	types {$/;"	s	file:
types	ftp.c	/^} types[] = {$/;"	v	typeref:struct:types
unix_server	ftp_var.h	/^Extern int	unix_server;	\/* server is unix, can use binary for ascii *\/$/;"	v
v_intr	button_press.c	/^	char *v_sz, *v_intr;$/;"	v
v_intr	button_press_orig.c	/^	char *width, *height, *f_name,*v_sz, *v_intr;$/;"	m	struct:__anon1	file:
v_intr	button_press_updated.c	/^	char *v_sz, *v_intr;$/;"	v
v_intr	char.h	/^        char *v_sz, *v_intr;$/;"	v
v_sz	button_press.c	/^	char *v_sz, *v_intr;$/;"	v
v_sz	button_press_orig.c	/^	char *width, *height, *f_name,*v_sz, *v_intr;$/;"	m	struct:__anon1	file:
v_sz	button_press_updated.c	/^	char *v_sz, *v_intr;$/;"	v
v_sz	char.h	/^        char *v_sz, *v_intr;$/;"	v
version	version.h	/^char version[]="ftplib 0.13\/netkit-ftp-0.17";$/;"	v
video	button_press_orig.c	/^	video_param video;$/;"	v
video_caps	video_capture.h	/^GstCaps *video_caps;$/;"	v
video_param	button_press_orig.c	/^}video_param;$/;"	t	typeref:struct:__anon1	file:
watcher_make	button_press.c	/^int watcher_make()$/;"	f
watcher_make	button_press_updated.c	/^int watcher_make()$/;"	f
watcher_make	cam_thread.c	/^int watcher_make()$/;"	f
width	button_press.c	/^	char *width, *height;$/;"	v
width	button_press_orig.c	/^	char *width, *height, *f_name,*v_sz, *v_intr;$/;"	m	struct:__anon1	file:
width	button_press_updated.c	/^	char *width, *height;$/;"	v
write_get_buf	ftplib.c	/^write_get_buf(char *buf, unsigned size)$/;"	f	file:
