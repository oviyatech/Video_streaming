!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CAMLH_DIR	Makefile	/^CAMLH_DIR = \/usr\/local\/godi\/lib\/ocaml\/std-lib\/$/;"	m
CC	Makefile	/^CC=arm-poky-linux-gnueabi-gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -I $(CAMLH_DIR) $(NO_CAML) -O2 -Wall$/;"	m
Extern	ftp_var.h	50;"	d
Extern	ftplib.c	66;"	d	file:
F_name	example.c	/^	static char *F_name;$/;"	v	file:
Ftp	ftp.ml	1;"	M
MALLOC_BUF	ftp.c	459;"	d	file:
NO_CAML	Makefile	/^NO_CAML      = -DNO_CAML$/;"	m
Read	example.c	/^	char Read;$/;"	v
Read_config_file	example.c	/^void Read_config_file(void)$/;"	f
TICKBYTES	ftp_var.h	47;"	d
UC	ftp.c	878;"	d	file:
abort_remote	ftp.c	/^abort_remote(FILE *din)$/;"	f	file:
abortrecv	ftp.c	/^abortrecv(int ignore)$/;"	f	file:
abortsend	ftp.c	/^abortsend(int ignore)$/;"	f	file:
abrtflag	ftp.c	/^static int abrtflag = 0;$/;"	v	file:
add_one_file	caml.c	/^static int add_one_file(char *file, unsigned unused)$/;"	f	file:
altarg	ftp_var.h	/^Extern char	*altarg;	\/* argv[1] with no shell-like preprocessing  *\/$/;"	v
buf	example.c	/^	char **buf[20];$/;"	v
bytename	ftp_var.h	/^Extern char	bytename[32];		\/* local byte size in ascii *\/$/;"	v
caml_ftp_cd	caml.c	/^CAMLprim value caml_ftp_cd(value directory)$/;"	f
caml_ftp_close	caml.c	/^CAMLprim value caml_ftp_close(void)$/;"	f
caml_ftp_delete	caml.c	/^CAMLprim value caml_ftp_delete(value file)$/;"	f
caml_ftp_get	caml.c	/^CAMLprim value caml_ftp_get(value rst,value remotefile, value localfile)$/;"	f
caml_ftp_ls	caml.c	/^CAMLprim value caml_ftp_ls(value long_ls, value name)$/;"	f
caml_ftp_mkdir	caml.c	/^CAMLprim value caml_ftp_mkdir(value directory)$/;"	f
caml_ftp_open	caml.c	/^CAMLprim value caml_ftp_open(value server, value login, value passwd)$/;"	f
caml_ftp_put	caml.c	/^CAMLprim value caml_ftp_put(value rst, value append,$/;"	f
caml_ftp_putunique	caml.c	/^CAMLprim value caml_ftp_putunique(value localfile, value remotefile)$/;"	f
caml_ftp_rename	caml.c	/^CAMLprim value caml_ftp_rename(value oldfile, value newfile)$/;"	f
caml_ftp_rmdir	caml.c	/^CAMLprim value caml_ftp_rmdir(value directory)$/;"	f
caml_ftp_sendcommand	caml.c	/^CAMLprim value caml_ftp_sendcommand(value command)$/;"	f
caml_setpassive	caml.c	/^CAMLprim value caml_setpassive(value passive)$/;"	f
caml_setsafeput	caml.c	/^CAMLprim value caml_setsafeput(value safeput)$/;"	f
caml_setsendport	caml.c	/^CAMLprim value caml_setsendport(value sendport)$/;"	f
caml_setverbose	caml.c	/^CAMLprim value caml_setverbose(value verbose)$/;"	f
caml_version	caml.c	/^CAMLprim value caml_version(void)$/;"	f
changetype	ftp.c	/^changetype(int newtype, int show)$/;"	f
cin	ftp.c	/^FILE *cin, *cout;$/;"	v
cmdabort	ftp.c	/^cmdabort(int ignore)$/;"	f	file:
code	ftp_var.h	/^Extern int	code;		\/* return\/reply code for ftp command *\/$/;"	v
command	ftp.c	/^command(const char *fmt, ...)$/;"	f
connected	ftp_var.h	/^Extern int	connected;	\/* connected to server *\/$/;"	v
copyright	ftplib.c	/^char copyright[] =$/;"	v
cout	ftp.c	/^FILE *cin, *cout;$/;"	v
cpend	ftp_var.h	/^Extern int	cpend;		\/* flag: if != 0, then pending server reply *\/$/;"	v
crflag	ftp_var.h	/^Extern int	crflag;		\/* if 1, strip car. rets. on ascii gets *\/$/;"	v
curtype	ftp_var.h	/^Extern int	curtype;		\/* current file transfer type *\/$/;"	v
d1	example.c	/^DIR *d1;$/;"	v
data	ftp.c	/^int data = -1;$/;"	v
data_addr	ftp.c	/^static struct sockaddr_in data_addr;$/;"	v	typeref:struct:sockaddr_in	file:
dataconn	ftp.c	/^dataconn(const char *lmode)$/;"	f	file:
dir	example.c	/^struct dirent *dir;$/;"	v	typeref:struct:dirent
do_init	ftplib.c	/^do_init(void)$/;"	f	file:
dologin	ftp.c	/^dologin(const char *luser, const char *pass)$/;"	f
empty	ftp.c	/^empty(fd_set *mask, int hifd, int sec)$/;"	f	file:
error	example.c	/^int error(char *msg)$/;"	f
error	example_orig.c	/^int error(char *msg)$/;"	f
f_cnt	example.c	/^static int n_cnt = 1,f_cnt;$/;"	v	file:
f_name	example.c	/^	char *f_name;$/;"	v
file	example.c	/^	FILE *file, *fp1, *fp2;$/;"	v
fin	ftplib.c	/^FILE *fout, *fin;$/;"	v
folder	example.c	/^char res[1024], folder[1024];$/;"	v
fout	ftplib.c	/^FILE *fout, *fin;$/;"	v
fp1	example.c	/^	FILE *file, *fp1, *fp2;$/;"	v
fp2	example.c	/^	FILE *file, *fp1, *fp2;$/;"	v
ftp_cd	ftplib.c	/^ftp_cd(char *directory)$/;"	f
ftp_close	ftplib.c	/^ftp_close(void)$/;"	f
ftp_debug	ftplib.h	/^int ftp_debug = 0;$/;"	v
ftp_delete	ftplib.c	/^ftp_delete(char *file)$/;"	f
ftp_get	ftplib.c	/^ftp_get(char *pathname, int(*fct)(char*,unsigned), unsigned bufsize, off_t rst)$/;"	f
ftp_getfile	ftplib.c	/^ftp_getfile(char *remote_file, char *local_file, off_t rst)$/;"	f
ftp_ls	ftplib.c	/^ftp_ls(int ll, char *pathname, int(*fct)(char*,unsigned))$/;"	f
ftp_mkdir	ftplib.c	/^ftp_mkdir(char *directory)$/;"	f
ftp_open	ftplib.c	/^ftp_open(char *server, char *login, char *passwd)$/;"	f
ftp_passive	ftplib.h	/^int ftp_passive = 1;$/;"	v
ftp_port	ftp_var.h	/^Extern int	ftp_port;	\/* htons'd port number for ftp service *\/$/;"	v
ftp_put	ftplib.c	/^ftp_put(char *pathname, int(*fct)(char*,unsigned), unsigned size, off_t rst,$/;"	f
ftp_putfile	ftplib.c	/^ftp_putfile(char *local_file, char *remote_file, off_t rst, int append)$/;"	f
ftp_putfileunique	ftplib.c	/^ftp_putfileunique(char *local_file, char *remote_file,$/;"	f
ftp_putunique	ftplib.c	/^ftp_putunique(char *pathname, char *uname, unsigned usize,$/;"	f
ftp_rcsid	ftp.c	/^char ftp_rcsid[] = $/;"	v
ftp_rename	ftplib.c	/^ftp_rename(char *oldname, char *newname)$/;"	f
ftp_rmdir	ftplib.c	/^ftp_rmdir(char *directory)$/;"	f
ftp_safeput	ftplib.h	/^int ftp_safeput = 1;  \/\/ if set, put to destfile".tmp", then rename$/;"	v
ftp_sendcommand	ftplib.c	/^ftp_sendcommand(char *cmd, char *buf, unsigned size)$/;"	f
ftp_sendport	ftplib.h	/^int ftp_sendport = 0;$/;"	v
ftp_verbose	ftplib.h	/^int ftp_verbose = 0;$/;"	v
get	ftp.ml	/^let get = gget 0$/;"	v
getreply	ftp.c	/^getreply(int expecteof)$/;"	f
hash	ftp_var.h	/^Extern int	hash;		\/* print # for each buffer transferred *\/$/;"	v
head	caml.c	/^static value head;$/;"	v	file:
hisctladdr	ftp.c	/^static struct sockaddr_in hisctladdr;$/;"	v	typeref:struct:sockaddr_in	file:
home	ftplib.c	/^const char *home = "\/";$/;"	v
hookup	ftp.c	/^hookup(char *host, int port)$/;"	f
hostname	ftp_var.h	/^Extern char	*hostname;	\/* name of host connected to *\/$/;"	v
initconn	ftp.c	/^initconn(void)$/;"	f	file:
intr	ftplib.c	/^intr(int ignore)$/;"	f
isDirectoryEmpty	example.c	/^int isDirectoryEmpty(char *dirname) {$/;"	f
k	example.c	/^ int k = 0;$/;"	v
len	example.c	/^	size_t len = 0;$/;"	v
line	example.c	/^	char *line = NULL;$/;"	v
lineIndex	example.c	/^	int lineIndex = 0;$/;"	v
local	example.c	/^char *local;$/;"	v
lostpeer	ftplib.c	/^lostpeer(int ignore)$/;"	f
lreply	ftp.c	/^char lreply[BUFSIZ];$/;"	v
ls	ftp.ml	/^let ls = gls true			(* long ls *)$/;"	v
main	example.c	/^int main()$/;"	f
main	example_orig.c	/^int main(int argc, char **argv)$/;"	f
mapflag	ftp_var.h	/^Extern int	mapflag;	\/* use mapin mapout templates on file names *\/$/;"	v
mapin	ftp_var.h	/^Extern char	mapin[MAXPATHLEN];	\/* input map template *\/$/;"	v
mapout	ftp_var.h	/^Extern char	mapout[MAXPATHLEN];	\/* output map template *\/$/;"	v
mflag	ftp_var.h	/^Extern int	mflag;		\/* flag: if != 0, then active multi command *\/$/;"	v
mode	ftp_var.h	/^Extern int	mode;			\/* file transfer mode *\/$/;"	v
mv_files	example.c	/^void mv_files(char *source, char *target)$/;"	f
myctladdr	ftp.c	/^static struct sockaddr_in myctladdr;$/;"	v	typeref:struct:sockaddr_in	file:
n_cnt	example.c	/^static int n_cnt = 1,f_cnt;$/;"	v	file:
nlist	ftp.ml	/^let nlist = gls false			(* name list *)$/;"	v
ntflag	ftp_var.h	/^Extern int	ntflag;		\/* use ntin ntout tables for name xlation *\/$/;"	v
ntin	ftp_var.h	/^Extern char	ntin[17];	\/* input translation table *\/$/;"	v
ntout	ftp_var.h	/^Extern char	ntout[17];	\/* output translation table *\/$/;"	v
nz	ftp.c	942;"	d	file:
options	ftp_var.h	/^Extern int	options;	\/* used during socket creation *\/$/;"	v
pasv	ftp_var.h	/^Extern char     pasv[64];       \/* passive port for proxy data connection *\/$/;"	v
process_entry	example.c	/^int process_entry(char *ent, unsigned len)$/;"	f
process_entry	example_orig.c	/^int process_entry(char *ent, unsigned len)$/;"	f
ptabflg	ftp.c	/^static int ptabflg = 0;$/;"	v	file:
ptransfer	ftp.c	/^ptransfer(const char *direction, long bytes, $/;"	f	file:
put	ftp.ml	/^let put = gput 0 false$/;"	v
read_put_buf	ftplib.c	/^read_put_buf(char *buf, unsigned size)$/;"	f	file:
recvabort	ftp.c	/^static sigjmp_buf recvabort;$/;"	v	file:
recvrequest	ftp.c	/^recvrequest(const char *cmd, char *remote, int (*out_fct)(char*,unsigned),$/;"	f
reply_string	ftp.c	/^char reply_string[BUFSIZ];		\/* last line of previous reply *\/$/;"	v
res	example.c	/^char res[1024], folder[1024];$/;"	v
reset	ftp.c	/^reset(void)$/;"	f
ret	example.c	/^int ret; $/;"	v
sendabort	ftp.c	/^static sigjmp_buf sendabort;$/;"	v	file:
sendrequest	ftp.c	/^sendrequest(const char *cmd, char *remote, int (*in_fct)(char*,unsigned),$/;"	f
structname	ftp_var.h	/^Extern char	structname[32];		\/* name of file transfer structure *\/$/;"	v
t_arg	ftp.c	/^	const char *t_arg;$/;"	m	struct:types	file:
t_mode	ftp.c	/^	const char *t_mode;$/;"	m	struct:types	file:
t_name	ftp.c	/^	const char *t_name;$/;"	m	struct:types	file:
t_type	ftp.c	/^	int t_type;$/;"	m	struct:types	file:
toplevel	ftp_var.h	/^Extern sigjmp_buf toplevel;	\/* non-local goto stuff for cmd scanner *\/$/;"	v
traceflag	ftp_var.h	/^Extern int	traceflag;	\/* trace packets exchanged *\/$/;"	v
traceflag	ftplib.c	/^int traceflag = 0;$/;"	v
tvsub	ftp.c	/^tvsub(struct timeval *tdiff, $/;"	f	file:
type	ftp_var.h	/^Extern int	type;			\/* requested file transfer type *\/$/;"	v
types	ftp.c	/^struct	types {$/;"	s	file:
types	ftp.c	/^} types[] = {$/;"	v	typeref:struct:types
unix_server	ftp_var.h	/^Extern int	unix_server;	\/* server is unix, can use binary for ascii *\/$/;"	v
version	version.h	/^char version[]="ftplib 0.13\/netkit-ftp-0.17";$/;"	v
write_get_buf	ftplib.c	/^write_get_buf(char *buf, unsigned size)$/;"	f	file:
